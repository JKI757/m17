package m17

import "testing"

func TestViterbiDecodePunctured(t *testing.T) {
	type args struct {
		out   []uint8
		in    []uint16
		punct []uint8
	}
	tests := []struct {
		name    string
		args    args
		want    int
		wantErr bool
	}{
		{"good",
			args{
				out: make([]uint8, 26+1),
				in: []uint16{
					0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0xffff, 0xffff, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0x0,
					0xffff, 0x0, 0x0, 0x0, 0xffff, 0x0, 0xffff, 0xfffe, 0x0, 0x0, 0xffff, 0xfffe, 0x0, 0x0, 0x0, 0xffff, 0x0,
					0x1, 0xffff, 0xffff, 0xffff, 0x1, 0xffff, 0x0, 0xffff, 0xffff, 0xffff, 0x1, 0xffff, 0x0, 0x0, 0x0, 0xffff,
					0x0, 0x0, 0x1, 0xffff, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0xffff, 0x1, 0xffff, 0xffff, 0x0,
					0x0, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0xffff, 0x1, 0x0, 0xffff, 0x0,
					0xffff, 0x0, 0x1, 0x0, 0xffff, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0x0, 0xffff, 0x0, 0x0, 0xffff, 0x0, 0x0,
					0xffff, 0x1, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0xffff, 0xffff, 0xfffe, 0x0, 0x1, 0x0, 0xffff, 0x0, 0xffff,
					0x0, 0xffff, 0xffff, 0x1, 0xffff, 0xfffe, 0x0, 0x1, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0, 0xffff,
					0xffff, 0x0, 0x0, 0xffff, 0x0, 0x0, 0xfffe, 0x0, 0x0, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0x0, 0x0,
					0x0, 0xffff, 0xfffe, 0xffff, 0xffff, 0xffff, 0xfffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfffe, 0x0, 0xfffe, 0xffff,
					0x0, 0x0, 0xffff, 0xffff, 0xfffe, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0, 0x0, 0xfffe, 0x0, 0xffff, 0x0, 0x0, 0x0,
					0xfffe, 0xffff, 0xffff, 0x0, 0xffff, 0xffff, 0xfffe, 0xffff, 0x1, 0xffff, 0x1, 0xffff, 0xfffe, 0x0, 0xffff,
					0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xfffe, 0xffff, 0x1, 0x0, 0x0,
					0x0, 0x0, 0x0, 0xffff, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0xfffe, 0x0, 0x1, 0x0,
					0xffff, 0x0, 0xffff, 0x0, 0xfffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0x0, 0xfffe, 0x0, 0x0, 0x0,
					0xffff, 0x0, 0xffff, 0x0, 0xfffe, 0xffff},
				punct: PuncturePattern3,
			},
			67,
			false,
		},
		{"lsf",
			args{
				out: make([]uint8, 30+1),
				in: []uint16{
					0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0xfffe, 0x0, 0xffff, 0x0, 0x0, 0xffff, 0x1,
					0xffff, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x1, 0x0,
					0x0, 0xffff, 0x0, 0xffff, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0,
					0xffff, 0x1, 0xffff, 0x1, 0xffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0xfffe, 0xffff, 0xffff, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0, 0xffff,
					0xffff, 0xffff, 0xfffe, 0x0, 0x1, 0xffff, 0x1, 0xffff, 0xffff, 0x0, 0xffff, 0xffff, 0x1, 0xffff, 0xfffe,
					0xffff, 0xffff, 0x0, 0xffff, 0x0, 0x0, 0x0, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0xffff, 0x0, 0xffff,
					0xffff, 0xfffe, 0x0, 0x0, 0xffff, 0x0, 0xffff, 0xfffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfffe, 0x0, 0xfffe, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
					0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0x0, 0x0,
					0x0, 0x0, 0x0, 0xffff, 0x0, 0x0, 0xffff, 0x1, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x1, 0x0, 0xffff,
					0x0, 0x1, 0x0, 0xfffe, 0xffff},
				punct: PuncturePattern1,
			},
			70,
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ViterbiDecodePunctured(tt.args.out, tt.args.in, tt.args.punct)
			if (err != nil) != tt.wantErr {
				t.Errorf("ViterbiDecodePunctured() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("ViterbiDecodePunctured() = %v, want %v", got, tt.want)
			}
		})
	}
}
